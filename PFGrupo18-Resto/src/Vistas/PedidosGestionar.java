/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vistas;

import AccesoDatos.MesaData;
import AccesoDatos.MeseroData;
import AccesoDatos.PedidoData;
import Entidades.Mesa;
import Entidades.PanelPersonalizado;
import Entidades.Pedido;
import static Vistas.MenuPrincipal.Escritorio;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author nstut
 */
public class PedidosGestionar extends javax.swing.JInternalFrame {
    DefaultTableModel modelo = new DefaultTableModel(){
        public boolean isCellEditable (int row, int colum) {
            return false;
        }
    };
    PanelPersonalizado fondo = new PanelPersonalizado("/imagenes/fondoInternal2.jpg");
    /**
     * Creates new form PedidosSegunMesa
     */
    public PedidosGestionar() {
        this.setContentPane(fondo);
        initComponents();
        this.setLocation(46, 15);
        cargarMesas();
        armarCabecera();
        vaciarTabla();
        cargarPedidos();
        cargarTotalMesa();
        pedidosNoEntregados();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane3 = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jcMesas = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTablaPedidos = new javax.swing.JTable();
        jbEntregado = new javax.swing.JButton();
        jbCobrar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtpPedidosSinEntregar = new javax.swing.JTextPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        jtpTotalMesa = new javax.swing.JTextPane();
        jbVolver = new javax.swing.JButton();
        jbEliminarPedido = new javax.swing.JButton();

        jScrollPane4.setViewportView(jTextPane3);

        setClosable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jLabel1.setFont(new java.awt.Font("Candara", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Pedidos");

        jLabel2.setFont(new java.awt.Font("Candara", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Mesa:");

        jcMesas.setBackground(new java.awt.Color(40, 40, 40));
        jcMesas.setFont(new java.awt.Font("Candara", 1, 16)); // NOI18N
        jcMesas.setForeground(new java.awt.Color(255, 255, 255));
        jcMesas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jcMesas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcMesasItemStateChanged(evt);
            }
        });
        jcMesas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jcMesasMouseClicked(evt);
            }
        });
        jcMesas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcMesasActionPerformed(evt);
            }
        });

        jPanel1.setOpaque(false);

        jtTablaPedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtTablaPedidos.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jtTablaPedidos);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        jbEntregado.setBackground(new java.awt.Color(0, 153, 51));
        jbEntregado.setFont(new java.awt.Font("Candara", 1, 16)); // NOI18N
        jbEntregado.setForeground(new java.awt.Color(255, 255, 255));
        jbEntregado.setText("Entregar");
        jbEntregado.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        jbEntregado.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbEntregado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEntregadoActionPerformed(evt);
            }
        });

        jbCobrar.setBackground(new java.awt.Color(0, 153, 51));
        jbCobrar.setFont(new java.awt.Font("Candara", 1, 16)); // NOI18N
        jbCobrar.setForeground(new java.awt.Color(255, 255, 255));
        jbCobrar.setText("Cobrar");
        jbCobrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbCobrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCobrarActionPerformed(evt);
            }
        });

        jLabel5.setText("Total adeudado por la mesa:");

        jLabel6.setText("Pedidos sin entregar:");

        jtpPedidosSinEntregar.setBackground(new java.awt.Color(40, 40, 40));
        jtpPedidosSinEntregar.setFont(new java.awt.Font("Candara", 1, 16)); // NOI18N
        jtpPedidosSinEntregar.setForeground(new java.awt.Color(255, 255, 255));
        jtpPedidosSinEntregar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jtpPedidosSinEntregar.setFocusable(false);
        jScrollPane2.setViewportView(jtpPedidosSinEntregar);

        jtpTotalMesa.setBackground(new java.awt.Color(40, 40, 40));
        jtpTotalMesa.setFont(new java.awt.Font("Candara", 1, 16)); // NOI18N
        jtpTotalMesa.setForeground(new java.awt.Color(255, 255, 255));
        jtpTotalMesa.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jtpTotalMesa.setFocusable(false);
        jScrollPane5.setViewportView(jtpTotalMesa);

        jbVolver.setBackground(new java.awt.Color(40, 40, 40));
        jbVolver.setFont(new java.awt.Font("Candara", 1, 16)); // NOI18N
        jbVolver.setForeground(new java.awt.Color(255, 255, 255));
        jbVolver.setText("Volver");
        jbVolver.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbVolverActionPerformed(evt);
            }
        });

        jbEliminarPedido.setBackground(new java.awt.Color(255, 0, 0));
        jbEliminarPedido.setFont(new java.awt.Font("Candara", 1, 16)); // NOI18N
        jbEliminarPedido.setForeground(new java.awt.Color(255, 255, 255));
        jbEliminarPedido.setText("Eliminar");
        jbEliminarPedido.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbEliminarPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEliminarPedidoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addComponent(jbCobrar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbVolver)
                .addGap(28, 28, 28))
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel5)
                        .addComponent(jLabel6))
                    .addComponent(jbEntregado, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbEliminarPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jcMesas, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(106, 106, 106))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(208, 208, 208))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcMesas, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbEntregado, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbEliminarPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addComponent(jLabel5))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbCobrar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcMesasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcMesasItemStateChanged
        vaciarTabla();
        cargarPedidos();
        cargarTotalMesa();
        pedidosNoEntregados();
        comprobarAtendida();
    }//GEN-LAST:event_jcMesasItemStateChanged

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        Escritorio.removeAll();
        Escritorio.repaint();
        PedidosOpciones po = new PedidosOpciones();
        
        po.setVisible(true);
        Escritorio.add(po);
        Escritorio.moveToFront(po);
    }//GEN-LAST:event_formInternalFrameClosed

    private void jcMesasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcMesasActionPerformed

    }//GEN-LAST:event_jcMesasActionPerformed

    private void jcMesasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jcMesasMouseClicked

    }//GEN-LAST:event_jcMesasMouseClicked

    private void jbEntregadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEntregadoActionPerformed
        int filas = jtTablaPedidos.getSelectedRowCount();
        int filaSelec;
        String entregado;
        int id;
        PedidoData pd = new PedidoData();
        Mesa mesa = (Mesa)jcMesas.getSelectedItem();
        
        if (filas > 0) {
            for (int i = 0; i < filas; i++) {
                filaSelec = jtTablaPedidos.getSelectedRows()[i];
                id = Integer.parseInt(jtTablaPedidos.getValueAt(filaSelec, 0).toString());
                entregado = jtTablaPedidos.getValueAt(filaSelec, 4).toString();
                if (entregado.equals("NO")) {
                    pd.entregarPedido(id);
                }
            }
            vaciarTabla();
            cargarPedidos();
            cargarTotalMesa();
            pedidosNoEntregados();
            comprobarAtendida();
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar al menos un pedido para entregar.");
        }
    }//GEN-LAST:event_jbEntregadoActionPerformed

    private void jbCobrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCobrarActionPerformed
        cobrarPedidos();
        
    }//GEN-LAST:event_jbCobrarActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        
    }//GEN-LAST:event_formInternalFrameClosing

    private void jbVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVolverActionPerformed
        this.dispose();
    }//GEN-LAST:event_jbVolverActionPerformed

    private void jbEliminarPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEliminarPedidoActionPerformed
        int filas = jtTablaPedidos.getSelectedRowCount();
        int[] filaSelec = jtTablaPedidos.getSelectedRows();
        List<Integer> ids = new ArrayList<>();
        PedidoData pd = new PedidoData();
        int eliminados = 0;
        try {
            if (filas > 0) {
            
                if ( JOptionPane.showConfirmDialog(this, "El pedido se eliminara permanentemente. ¿Desea continuar?","Confirmar",0)== 0) {
                    
                    for (int i = 0; i < filas; i++) {
                        ids.add(Integer.parseInt(jtTablaPedidos.getValueAt(filaSelec[i], 0).toString()));
                    }
                    for (int id :ids) {
                        eliminados += pd.eliminarPedido(id);
                    }
                    if(eliminados == 0){
                         JOptionPane.showMessageDialog(this, "No exite el pedido en la base de datos.");
                    } else if (eliminados == 1){
                        JOptionPane.showMessageDialog(this, "Pedido eliminado exitosamente.");
                    }  else if (eliminados > 1){
                        JOptionPane.showMessageDialog(this, "Pedidos eliminados exitosamente.");
                    }   
                        vaciarTabla();
                        cargarPedidos();
                        cargarTotalMesa();
                        pedidosNoEntregados();
                        comprobarAtendida();
                }
            
            
            } else {
                JOptionPane.showMessageDialog(this, "Debe seleccionar al menos un pedido para eliminar.");
            }
        }catch (ArrayIndexOutOfBoundsException ex) {}
    }//GEN-LAST:event_jbEliminarPedidoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextPane jTextPane3;
    private javax.swing.JButton jbCobrar;
    private javax.swing.JButton jbEliminarPedido;
    private javax.swing.JButton jbEntregado;
    private javax.swing.JButton jbVolver;
    private javax.swing.JComboBox<Mesa> jcMesas;
    private javax.swing.JTable jtTablaPedidos;
    private javax.swing.JTextPane jtpPedidosSinEntregar;
    private javax.swing.JTextPane jtpTotalMesa;
    // End of variables declaration//GEN-END:variables

private void armarCabecera(){
    modelo.addColumn("N° Pedido");
    modelo.addColumn("Mesero");
    modelo.addColumn("Hora");
    modelo.addColumn("Importe");
    modelo.addColumn("Entregado");
    jtTablaPedidos.setModel(modelo);
    
    TableColumnModel modeloCol = jtTablaPedidos.getColumnModel();
    modeloCol.getColumn(0).setPreferredWidth(30);
    modeloCol.getColumn(1).setPreferredWidth(110);
    modeloCol.getColumn(2).setPreferredWidth(20);
    modeloCol.getColumn(3).setPreferredWidth(40);
    modeloCol.getColumn(4).setPreferredWidth(35);
}
    private void vaciarTabla () {
        for (int i = modelo.getRowCount()-1; i >= 0;i--){
            modelo.removeRow(i);
        }
    }
    private void vaciarMesas() {
        for (int i = jcMesas.getItemCount()-1; i >= 0;i--){
            jcMesas.removeItem(i);
        }
    }
    private void cargarMesas () {
        MesaData md = new MesaData();
        List<Mesa> mesas = md.listarMesas();
        Mesa mesaDefecto = new Mesa(0,0,false,0){
            @Override
            public String toString() {
                return "                   --Mesas--";
            }
        };
        jcMesas.addItem(mesaDefecto);
        for (Mesa aux : mesas) {
            if (aux.isEstado() && aux.getOcupada() != 0) {
                jcMesas.addItem(aux);
            }
        }
    }
    private void cargarPedidos () {
        PedidoData pd = new PedidoData();
        MeseroData md = new MeseroData();
        Mesa mesa = (Mesa)jcMesas.getSelectedItem();
        if ( mesa != null) {
            List<Pedido> pedidos = pd.listarPedidos(mesa);
             String pagado;
        
            DateTimeFormatter horaFormat = DateTimeFormatter.ofPattern("HH:mm");
            String hora; 

            for (Pedido aux : pedidos) {
                if (!aux.isPagado()) {
                    if(aux.isEntregado()) {
                        pagado = "SI";
                    } else {
                        pagado= "NO";
                    }
                    hora = aux.getHora().format(horaFormat);
                    modelo.addRow(new Object[]{aux.getId_pedido(),aux.getMesero().getNombre()+" "+aux.getMesero().getApellido(),hora,"$"+aux.getImporte(),pagado});
                }

            }
        }
       
    }
    
    private void cargarTotalMesa () {
        double total = 0;
        int filas = modelo.getRowCount();
        int id;
        String entregado;
        
        PedidoData pd = new PedidoData();
        Pedido pedido;
        
        try {
            if (filas > 0) {
                for (int i = 0; i < filas; i++) {
                   id = Integer.parseInt(jtTablaPedidos.getValueAt(i, 0).toString());
                   entregado = jtTablaPedidos.getValueAt(i, 4).toString();

                   if (entregado.equals("SI")) {
                        pedido = pd.getPedido(id);

                        total += pedido.getImporte();
                   }
                }
            } 
            jtpTotalMesa.setText("$"+total);
        } catch (NullPointerException ex) {
        }
    }
    
    private void pedidosNoEntregados () {
        int noEntregados = 0;
        int filas = modelo.getRowCount();
        String entregado;
        
        try {
            if (filas > 0) {
                for (int i = 0; i < filas; i++) {
                   entregado = jtTablaPedidos.getValueAt(i, 4).toString();

                   if (entregado.equals("NO")) {
                       noEntregados++;
                   }
                }
            } 
            jtpPedidosSinEntregar.setText(""+noEntregados);
        } catch (NullPointerException ex) {
        } catch (ArrayIndexOutOfBoundsException exc) {}
    }
    
    private void cobrarPedidos () {
        int filas = modelo.getRowCount();
        if (filas == 0){
            JOptionPane.showMessageDialog(this, "Debe seleccionar una mesa.");
        }else{
            int entregada = 0;
            String entregado;
            for (int i = 0; i < filas; i++) {
                entregado = jtTablaPedidos.getValueAt(i, 4).toString();
                if (entregado.equals("NO")) {
                      entregada++;
                }
            }
            if (entregada >0) {
                JOptionPane.showMessageDialog(this, "Aún hay pedidos sin entregar.");
            } else {
                int opcion = JOptionPane.showConfirmDialog(this, "¿Desea cobrar todos los pedidos entregados en la mesa?","Confirmación",0);    
                if (opcion == 0) {
                    try {
                        int id_pedido;
                        PedidoData pd = new PedidoData();
                        MesaData md = new MesaData();
                        Mesa mesa = (Mesa) jcMesas.getSelectedItem();

                        for (int i = 0; i < filas; i++) {
                            id_pedido = Integer.parseInt(jtTablaPedidos.getValueAt(i, 0).toString());
                            pd.pagarPedido(id_pedido);
                        }
                        md.setOcupadaMesa(0, mesa.getId_mesa());
                        jcMesas.removeItem(mesa);
                    } catch (NullPointerException ex) {
                    } catch (ArrayIndexOutOfBoundsException exc) {
                        JOptionPane.showMessageDialog(this, "Error al pagar pedido");
                    }
                }
            }
            vaciarTabla();
            cargarPedidos();
            pedidosNoEntregados();
            cargarTotalMesa(); 
            
        }
    }
    
    private void comprobarAtendida() {
        MesaData md = new MesaData();
        PedidoData pd = new PedidoData();
        Mesa mesa = (Mesa)jcMesas.getSelectedItem();
        if (pd.pedidosSinEntregar(mesa.getId_mesa()) == 0 && mesa != null) {
            md.setOcupadaMesa(2, mesa.getId_mesa());
        }
        
    }
}
